var fylter =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * @typedef {string} FilterState\n */\n\n/**\n * Define possible states of the filter\n * @readonly\n * @enum {FilterState}\n */\nvar FILTER_STATE = exports.FILTER_STATE = {\n  /** Filter has not been constructed yet */\n  BUILDING: 'filter/state/building',\n  /** Filter has started the data fetch process */\n  LOADING: 'filter/state/loading',\n  /** Filter has encountered some sort of error */\n  ERROR: 'filter/state/error',\n  /** Filter is not currently perfroming any specific action and is ready for user inout */\n  IDLE: 'filter/state/idle',\n  /** Filter has been disabled and user input is not possible */\n  DISABLED: 'filter/state/disabled'\n};\n\n/**\n * @typedef {string} FilterSetState\n */\n\n/**\n * Define possible states of the filter set as a whole\n * @readonly\n * @enum {FilterSetState}\n */\nvar FILTER_SET_STATE = exports.FILTER_SET_STATE = {\n  /** Filter set is in the process of building and populating initial data in filters */\n  INITIALISING: 'filterset/state/init',\n  /** Filter set is not currently perfroming any specific action and is ready for user inout */\n  IDLE: 'filterset/state/idle',\n  /** Filter set has encountereda problem and user input is not possible */\n  ERROR: 'filterset/state/error',\n  /** Filter set is in process of resetting values */\n  RESETTING: 'filter/state/resetting'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvZW51bS9FbnVtLmpzPzM2ZGYiXSwibmFtZXMiOlsiRklMVEVSX1NUQVRFIiwiQlVJTERJTkciLCJMT0FESU5HIiwiRVJST1IiLCJJRExFIiwiRElTQUJMRUQiLCJGSUxURVJfU0VUX1NUQVRFIiwiSU5JVElBTElTSU5HIiwiUkVTRVRUSU5HIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7OztBQUlBOzs7OztBQUtPLElBQU1BLHNDQUFlO0FBQ3hCO0FBQ0FDLFlBQVUsdUJBRmM7QUFHeEI7QUFDQUMsV0FBUyxzQkFKZTtBQUt4QjtBQUNBQyxTQUFPLG9CQU5pQjtBQU94QjtBQUNBQyxRQUFNLG1CQVJrQjtBQVN4QjtBQUNBQyxZQUFVO0FBVmMsQ0FBckI7O0FBYVA7Ozs7QUFJQTs7Ozs7QUFLTyxJQUFNQyw4Q0FBbUI7QUFDNUI7QUFDQUMsZ0JBQWMsc0JBRmM7QUFHNUI7QUFDQUgsUUFBTSxzQkFKc0I7QUFLNUI7QUFDQUQsU0FBTyx1QkFOcUI7QUFPNUI7QUFDQUssYUFBVztBQVJpQixDQUF6QiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEB0eXBlZGVmIHtzdHJpbmd9IEZpbHRlclN0YXRlXG4gKi9cblxuLyoqXG4gKiBEZWZpbmUgcG9zc2libGUgc3RhdGVzIG9mIHRoZSBmaWx0ZXJcbiAqIEByZWFkb25seVxuICogQGVudW0ge0ZpbHRlclN0YXRlfVxuICovXG5leHBvcnQgY29uc3QgRklMVEVSX1NUQVRFID0ge1xuICAgIC8qKiBGaWx0ZXIgaGFzIG5vdCBiZWVuIGNvbnN0cnVjdGVkIHlldCAqL1xuICAgIEJVSUxESU5HOiAnZmlsdGVyL3N0YXRlL2J1aWxkaW5nJyxcbiAgICAvKiogRmlsdGVyIGhhcyBzdGFydGVkIHRoZSBkYXRhIGZldGNoIHByb2Nlc3MgKi9cbiAgICBMT0FESU5HOiAnZmlsdGVyL3N0YXRlL2xvYWRpbmcnLFxuICAgIC8qKiBGaWx0ZXIgaGFzIGVuY291bnRlcmVkIHNvbWUgc29ydCBvZiBlcnJvciAqL1xuICAgIEVSUk9SOiAnZmlsdGVyL3N0YXRlL2Vycm9yJyxcbiAgICAvKiogRmlsdGVyIGlzIG5vdCBjdXJyZW50bHkgcGVyZnJvbWluZyBhbnkgc3BlY2lmaWMgYWN0aW9uIGFuZCBpcyByZWFkeSBmb3IgdXNlciBpbm91dCAqL1xuICAgIElETEU6ICdmaWx0ZXIvc3RhdGUvaWRsZScsXG4gICAgLyoqIEZpbHRlciBoYXMgYmVlbiBkaXNhYmxlZCBhbmQgdXNlciBpbnB1dCBpcyBub3QgcG9zc2libGUgKi9cbiAgICBESVNBQkxFRDogJ2ZpbHRlci9zdGF0ZS9kaXNhYmxlZCdcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge3N0cmluZ30gRmlsdGVyU2V0U3RhdGVcbiAqL1xuXG4vKipcbiAqIERlZmluZSBwb3NzaWJsZSBzdGF0ZXMgb2YgdGhlIGZpbHRlciBzZXQgYXMgYSB3aG9sZVxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7RmlsdGVyU2V0U3RhdGV9XG4gKi9cbmV4cG9ydCBjb25zdCBGSUxURVJfU0VUX1NUQVRFID0ge1xuICAgIC8qKiBGaWx0ZXIgc2V0IGlzIGluIHRoZSBwcm9jZXNzIG9mIGJ1aWxkaW5nIGFuZCBwb3B1bGF0aW5nIGluaXRpYWwgZGF0YSBpbiBmaWx0ZXJzICovXG4gICAgSU5JVElBTElTSU5HOiAnZmlsdGVyc2V0L3N0YXRlL2luaXQnLFxuICAgIC8qKiBGaWx0ZXIgc2V0IGlzIG5vdCBjdXJyZW50bHkgcGVyZnJvbWluZyBhbnkgc3BlY2lmaWMgYWN0aW9uIGFuZCBpcyByZWFkeSBmb3IgdXNlciBpbm91dCAqL1xuICAgIElETEU6ICdmaWx0ZXJzZXQvc3RhdGUvaWRsZScsXG4gICAgLyoqIEZpbHRlciBzZXQgaGFzIGVuY291bnRlcmVkYSBwcm9ibGVtIGFuZCB1c2VyIGlucHV0IGlzIG5vdCBwb3NzaWJsZSAqL1xuICAgIEVSUk9SOiAnZmlsdGVyc2V0L3N0YXRlL2Vycm9yJyxcbiAgICAvKiogRmlsdGVyIHNldCBpcyBpbiBwcm9jZXNzIG9mIHJlc2V0dGluZyB2YWx1ZXMgKi9cbiAgICBSRVNFVFRJTkc6ICdmaWx0ZXIvc3RhdGUvcmVzZXR0aW5nJ1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2pzL2VudW0vRW51bS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Filter = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _TreeNode2 = __webpack_require__(5);\n\nvar _NativeSelect = __webpack_require__(6);\n\nvar _Enum = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Middlewares to use when there is no middlewares provided in filter config\n * @typedef {Object} Middlewares\n * @property {Function} beforeOptionUpdate function called after the filter has successfully fetched data, passed teh data and should return a set of options to render\n * @property {Function} decideDefault function taht is passed tehset of options adn should return an id of an option to set as default\n * @property {Function} decideFilterEnabledState passed a filter that caused an update event and returns a boolean of wether the filter is enabled\n */\n\n/**\n * Type that defines a single filter option, this should be the format returned by the beforeOptionUpdate function\n * @typedef {Object} Option\n * @property {String} name options display name\n * @property {String} value the value for the options\n * @property {Object} extra extra data attached to the options\n */\n\n/**\n * Default filter config to use when no filter config passed\n * @typedef {Object} FilterConfig\n * @property {String} name the name of the filter\n * @property {Function} data a function that defines data grabbing behaviour, returns a string, Array.<Option> or a promise that resolves with a Array.<Option>\n * @property {FilterInterface} uiClass the class to use to render the filter, must extends the FilterInterface class\n * @property {String} wrapperClass class that gets applied around the whole filter\n * @property {Middlewares} middleWares set of middlewares to use in this filter\n * @property {Array.<String>} dependsOn the set of filters that will cause this one to update\n * @property {HTMLElement} wrapper the wrapper element where the filter should be appended, set by the filter set and shouldnt be overridden\n * @property {Function} dataFetchImplementation function that takes a url and resolves with fetched data\n * @property {Function} onOptionSelected callback to fire when the filter updates. This is set by the filter set and shouldnt be overridden\n */\n\n/**\n * Object that represents a filters current state and selected option\n * @typedef {Object} CurrentFilterValue\n * @property {String} filterName the name of the filter\n * @property {String} [name] the name of the curretn option\n * @property {String} [value] the value of the current selcted option\n * @property {Object} [extra] extra data attached to the option\n * @property {FilterState} state the current state of the filter\n */\n\n/**\n * FIlter class to handle interactions between the filter set and the ui element that is implmented\n * by the user or the default filter ui class\n *\n * @extends TreeNode\n */\nvar Filter = exports.Filter = function (_TreeNode) {\n    _inherits(Filter, _TreeNode);\n\n    _createClass(Filter, null, [{\n        key: 'DEFAULT_MIDDLEWARES',\n\n\n        /**\n         * Get the default set of middlewares for a filter\n         *\n         * @return {Middlewares} the middlewares to use of none already set in filter config\n         * @static\n         */\n        value: function DEFAULT_MIDDLEWARES() {\n            return {\n                beforeOptionUpdate: function beforeOptionUpdate(options) {\n                    return options;\n                },\n                decideDefault: function decideDefault(options) {\n                    return options[0].value;\n                },\n                decideFilterEnabledState: function decideFilterEnabledState(dependantUpdated) {\n                    return true;\n                }\n            };\n        }\n\n        /**\n         * Get the default filter config\n         *\n         * @return {FilterConfig} the filter config\n         * @static\n         */\n\n    }, {\n        key: 'DEFAULT_CONFIG',\n        value: function DEFAULT_CONFIG() {\n            return {\n                uiClass: _NativeSelect.NativeSelectFilter,\n                wrapperClass: 'filter'\n            };\n        }\n\n        /**\n         * Render a warning into the console, automatically add this filters name\n         * @param  {String} name    the name of the filter\n         * @param  {String} message the warning message\n         * @static\n         */\n\n    }, {\n        key: 'warn',\n        value: function warn(name, message) {\n            console.warn('Filter (' + name + '): ' + message);\n        }\n\n        /**\n         * Get a set of utility functions that can be used in middleware functions\n         * @return {Object} set of utility functions\n         * @static\n         */\n\n    }, {\n        key: 'FILTER_UTIL_FUNCTIONS',\n        value: function FILTER_UTIL_FUNCTIONS() {\n            return {\n                DISABLE_WHEN_VALUE: function DISABLE_WHEN_VALUE(value) {\n\n                    return function (dependantUpdated) {\n                        if (dependantUpdated.getCurrentOption().value === value) {\n                            return false;\n                        }\n                        return true;\n                    };\n                }\n            };\n        }\n\n        /**\n         * Constructor function for filter class creates filter and sets state to loading\n         *\n         * @param {FilterConfig} config configuration for this filter\n         */\n\n    }]);\n\n    function Filter(config) {\n        _classCallCheck(this, Filter);\n\n        var _this = _possibleConstructorReturn(this, (Filter.__proto__ || Object.getPrototypeOf(Filter)).call(this));\n\n        _this.setState(_Enum.FILTER_STATE.BUILDING);\n        _this.config = _extends({}, Filter.DEFAULT_CONFIG(), config);\n        _this.config.middleWares = _extends({}, Filter.DEFAULT_MIDDLEWARES(), _this.config.middleWares);\n        _this.uiElement = new _this.config.uiClass();\n        _this.uiElement.setSelectedCallback(_this.onSelect.bind(_this));\n        _this.setupContainer();\n        _this.optionList = [];\n        _this.setState(_Enum.FILTER_STATE.LOADING);\n        return _this;\n    }\n\n    /**\n     * Set the state of the filter\n     *\n     * @param {FilterState} state the filter state\n     */\n\n\n    _createClass(Filter, [{\n        key: 'setState',\n        value: function setState(state) {\n            this.state = state;\n        }\n\n        /**\n         * Creates the container that the ui element will render its contents into\n         */\n\n    }, {\n        key: 'setupContainer',\n        value: function setupContainer() {\n\n            this.container = document.createElement('div');\n            this.config.wrapper.appendChild(this.container);\n            this.container.classList.add(this.config.wrapperClass);\n            this.uiElement.setContainer(this.container);\n        }\n\n        /**\n         * Function only called for root filters, called once on the set up of the filter\n         *\n         * @return {Promise} promise that resolves when filter data has been fetched\n         */\n\n    }, {\n        key: 'init',\n        value: function init() {\n            var _this2 = this;\n\n            return this.getOptionsData().then(function () {\n                return _this2.config.onOptionSelected(_this2);\n            });\n        }\n\n        /**\n         * Callback that is invoked by the uiClass when an item has been selected by the user\n         *\n         * @param  {string} id the id of the selected item\n         * @return {Promise} promise that resolves when the filterset has finished its updates related to this change\n         */\n\n    }, {\n        key: 'onSelect',\n        value: function onSelect(id) {\n            this.setCurrentId(id);\n            return this.config.onOptionSelected(this);\n        }\n\n        /**\n         * Get an object representing the current state of the filter\n         *\n         * @return {CurrentFilterValue} the current value of the filter\n         */\n\n    }, {\n        key: 'getCurrentOption',\n        value: function getCurrentOption() {\n\n            var option = this._getOptionForValue(this.getCurrentId());\n\n            return _extends({\n                filterName: this.getName(),\n                state: this.getState()\n            }, option);\n        }\n\n        /**\n         * Given a value fetch an option from the list\n         *\n         * @param  {String} value the value of option to find\n         * @return {Option|Object} the option or an empty object\n         */\n\n    }, {\n        key: '_getOptionForValue',\n        value: function _getOptionForValue(value) {\n\n            if (value === false) {\n                return {};\n            }\n\n            var options = this.getOptionList();\n\n            for (var x = 0; x < options.length; x++) {\n                var option = options[x];\n\n                if (option.value.toString() === value.toString()) {\n                    return option;\n                }\n            }\n\n            return {};\n        }\n\n        /**\n         * When the config.data function returns a string this is used to make a network call. You can also use\n         * format strings with parent filter values here\n         *\n         * @example <caption>Using format parameters in a data url</caption>\n         * // The {{SomeFilter}} value will be replaced by the current value of that filter\n         * // The filter used must be a parent of this filter\n         * {\n         *  dependsOn: [ 'SomeFilter' ]\n         *  data: () => 'http://www.myapi.com/endpoint/{{someFilter}}/data'\n         * }\n         *\n         * @param  {String} url url from the config.data function\n         * @return {String} the url with any format strings evaluated\n         */\n\n    }, {\n        key: '_buildAPIUrl',\n        value: function _buildAPIUrl(url) {\n\n            var parent = this.getParent();\n            if (!parent) {\n                return url;\n            }\n\n            var replace = '{{' + parent.getName() + '}}';\n\n            return url.replace(replace, parent.getCurrentOption().value);\n        }\n\n        /**\n         * The config.data function can return a array, promise or string, here we abstract out this behaviour so whatever\n         * is specified in the config can be fetched as a promise that eventually resolves with data.\n         *\n         * @example <caption>Different ways of specifying the config data property</caption>\n         *\n         * {\n         *  data: updatingFilter => 'http://www.myapi...',\n         *  data: updatingFilter => [ { name, value }... ],\n         *  data: updatingFilter => new Promise(...)\n         * }\n         *\n         * @param  {Filter} initiatingFilter the filter that caused the update\n         * @return {Promise} promise that resolves with data\n         */\n\n    }, {\n        key: '_getDataPromise',\n        value: function _getDataPromise(initiatingFilter) {\n\n            var dataResult = this.config.data(initiatingFilter);\n\n            switch (typeof dataResult === 'undefined' ? 'undefined' : _typeof(dataResult)) {\n\n                case 'string':\n                    return this.config.dataFetchImplementation(this._buildAPIUrl(dataResult));\n                    break;\n                case 'object':\n                    if (dataResult instanceof Array) {\n                        return Promise.resolve(dataResult);\n                    }\n\n                    if (dataResult instanceof Promise) {\n                        return dataResult;\n                    }\n\n                    Filter.warn(this.getName(), 'Filter data needs to be a api endpoint (string) an array or promise');\n                    return Promise.resolve([]);\n\n            }\n        }\n\n        /**\n         * main function to initilate the fetching of data for the filter\n         *\n         * @param  {Filter} [initiatingFilter] The filter that was updated to cause this filter to update\n         * @return {Promise} Promise that resolves when the data fetch and render is complete\n         */\n\n    }, {\n        key: 'getOptionsData',\n        value: function getOptionsData(initiatingFilter) {\n            var _this3 = this;\n\n            // if the middleware tells us to disable or the parent is disabled then disable this\n            if (initiatingFilter && (initiatingFilter.isDisabled() || !this.config.middleWares.decideFilterEnabledState(initiatingFilter))) {\n                this.setCurrentId(false);\n                this.setState(_Enum.FILTER_STATE.DISABLED);\n                return Promise.resolve();\n            }\n\n            this.setState(_Enum.FILTER_STATE.LOADING);\n            return this._getDataPromise(initiatingFilter).then(function (data) {\n                return _this3.config.middleWares.beforeOptionUpdate(data);\n            }).then(function (options) {\n                _this3.setOptionList(options);\n                if (options && options.length) {\n                    _this3.setCurrentId(_this3.config.middleWares.decideDefault(_this3.getOptionList()));\n                    _this3.render();\n                    _this3.setState(_Enum.FILTER_STATE.IDLE);\n                } else {\n                    _this3.setState(_Enum.FILTER_STATE.DISABLED);\n                }\n            }).catch(function (error) {\n                Filter.warn(_this3.getName(), error.toString());\n                _this3.setState(_Enum.FILTER_STATE.ERROR);\n            });\n        }\n\n        /**\n         * Get the name of this filter\n         *\n         * @return {String} the name of the filter\n         */\n\n    }, {\n        key: 'getName',\n        value: function getName() {\n            return this.config.name;\n        }\n\n        /**\n         * get the names of the filters that this filter depends on\n         *\n         * @return {Array.<String>} the filter names\n         */\n\n    }, {\n        key: 'getDependencies',\n        value: function getDependencies() {\n            return this.config.dependsOn || [];\n        }\n\n        /**\n         * Determine if the filter is disabled\n         *\n         * @return {Boolean} wether this filter is currently disabled\n         */\n\n    }, {\n        key: 'isDisabled',\n        value: function isDisabled() {\n            return this.getState() === _Enum.FILTER_STATE.DISABLED;\n        }\n\n        /**\n         * Function that is called when a filter that this instance is dependent on is updated. This is called by the\n         * FilterSet code. Should not be invoked manually.\n         *\n         * @param  {Filter} filter filter causing the update\n         * @return {Promise} promise that resolves when this filter is finished fetching data\n         */\n\n    }, {\n        key: 'dependencyDidUpdate',\n        value: function dependencyDidUpdate(filter) {\n\n            if (filter.getState() === _Enum.FILTER_STATE.ERROR) {\n                this.setState(_Enum.FILTER_STATE.ERROR);\n                return Promise.reject(new Error('Filter cannot be updated when parent is in an error state'));\n            }\n\n            return this.getOptionsData(filter);\n        }\n\n        /**\n         * Set the set of options that will be displayed by the filter\n         *\n         * @param {Array.<Option>} list list of options\n         */\n\n    }, {\n        key: 'setOptionList',\n        value: function setOptionList(list) {\n            this.optionList = list;\n        }\n\n        /**\n         * Get the current option set\n         *\n         * @return {Array.<Option>} current option set\n         */\n\n    }, {\n        key: 'getOptionList',\n        value: function getOptionList() {\n            return this.optionList;\n        }\n\n        /**\n         * This function will initiate the reset of this filter and also its dependants, this should\n         * not be called manually and is only called by the FilterSet\n         *\n         * @returns {Promise} promise that resolves when this filter and its children has been reset\n         */\n\n    }, {\n        key: 'reset',\n        value: function reset() {\n\n            var defaultVal = this.config.middleWares.decideDefault(this.getOptionList());\n            this.uiElement.setValue(defaultVal);\n            return this.onSelect(defaultVal);\n        }\n\n        /**\n         * Set the ID (value) of the current option that is selected\n         *\n         * @param {String} id the id that has been selected\n         */\n\n    }, {\n        key: 'setCurrentId',\n        value: function setCurrentId(id) {\n            this.currentId = id;\n        }\n\n        /**\n         * Get the id of the currently selected option\n         *\n         * @return {String|boolean} the id\n         */\n\n    }, {\n        key: 'getCurrentId',\n        value: function getCurrentId() {\n            return this.currentId || false;\n        }\n\n        /**\n         * Set the state of this filter and perform any associated actions\n         *\n         * @param {FilterState} state state to set\n         */\n\n    }, {\n        key: 'setState',\n        value: function setState(state) {\n            this.state = state;\n\n            switch (this.state) {\n                case _Enum.FILTER_STATE.LOADING:\n                    this.uiElement.setLoadingState(this.getName());\n                    break;\n                case _Enum.FILTER_STATE.ERROR:\n                    this.uiElement.removeLoadingState(this.getName());\n                    this.uiElement.setErrorState(this.getName());\n                    break;\n                case _Enum.FILTER_STATE.IDLE:\n                    this.uiElement.removeLoadingState(this.getName());\n                    break;\n                case _Enum.FILTER_STATE.DISABLED:\n                    this.uiElement.setDisabledState(this.getName());\n                    break;\n            }\n        }\n\n        /**\n         * Get the current state of the filter\n         *\n         * @return {FilterState} current state\n         */\n\n    }, {\n        key: 'getState',\n        value: function getState() {\n            return this.state;\n        }\n\n        /**\n         * Tell the uiClass that it needs to render the filter into the page as all of the data needed is ready\n         */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            this.uiElement.render(this.getName(), this.getOptionList(), this.getCurrentId());\n        }\n\n        /**\n         * Return the uiElement that is used to manage the filter in the DOM\n         * @return {FilterInterface} a class implementing the FilterInterface class\n         */\n\n    }, {\n        key: 'getUiElement',\n        value: function getUiElement() {\n            return this.uiElement;\n        }\n    }]);\n\n    return Filter;\n}(_TreeNode2.TreeNode);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class representing the functions that must be implemented by a custom filter\n * @interface\n */\nvar FilterInterface = exports.FilterInterface = function () {\n  function FilterInterface() {\n    _classCallCheck(this, FilterInterface);\n  }\n\n  /**\n   * This function will be called with a callback function by fylter library code.\n   * You can then store this callback reference and invoke it with the value of the option\n   * that was seldcted when this happens in you rimplementation\n   *\n   * @param {Function} callback the callback function that accepts a single 'value' argument\n   */\n\n\n  _createClass(FilterInterface, [{\n    key: 'setSelectedCallback',\n    value: function setSelectedCallback(callback) {\n      console.warn('setSelectedCallback should be overridden by a implementing class');\n    }\n\n    /**\n     * Your custom implmentation should provide a way to set the value of a filter programatically given\n     * an ID of an option\n     *\n     * @param {String} id the id of the option to set\n     */\n\n  }, {\n    key: 'setValue',\n    value: function setValue(id) {\n      console.warn('setValue should be overridden by a implementing class');\n    }\n\n    /**\n     * The main render function that will be called to add the filter to the DOM\n     *\n     * @param  {String} title the title of the filter\n     * @param  {Array.<Option>} options the set of options to render\n     * @param  {String} defaultOptionValue the ID of the option that is currently selected\n     */\n\n  }, {\n    key: 'render',\n    value: function render(title, options, defaultOptionValue) {\n      console.warn('render should be overridden by a implementing class');\n    }\n\n    /**\n     * Your custom implementation should provide a loading state for the filter this will be invoked when\n     * the filter starts to fetch data\n     *\n     * @param {String} title the title of the filter\n     */\n\n  }, {\n    key: 'setLoadingState',\n    value: function setLoadingState(title) {\n      console.warn('setLoading should be overridden by a implementing class');\n    }\n\n    /**\n     * Remove the loading state from tge filter called by library code when the data has been fetched\n     *\n     * @param {String} title the title of the filter\n     */\n\n  }, {\n    key: 'removeLoadingState',\n    value: function removeLoadingState(title) {\n      console.warn('removeLoading should be overridden by a implementing class');\n    }\n\n    /**\n     * Disable the filter so that the user cannot interact with it\n     *\n     * @param {String} title the title of the filter\n     */\n\n  }, {\n    key: 'setDisabledState',\n    value: function setDisabledState(title) {\n      console.warn('setDisabledState should be overridden by a implementing class');\n    }\n\n    /**\n     * Something has gone wrong with the filter ! display an error state to the user\n     */\n\n  }, {\n    key: 'setErrorState',\n    value: function setErrorState() {\n      console.warn('setErrorState should be overridden by a implementing class');\n    }\n\n    /**\n     * Allows you to keep a reference to the container element and when rendering your custom markup should go into this container\n     * @param {HTMLElement} container the container where the filter should be rendered\n     */\n\n  }, {\n    key: 'setContainer',\n    value: function setContainer(container) {\n      console.warn('setContainer should be overridden by a implementing class');\n    }\n  }]);\n\n  return FilterInterface;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvZmlsdGVyL0ZpbHRlckludGVyZmFjZS5qcz83ZjRlIl0sIm5hbWVzIjpbIkZpbHRlckludGVyZmFjZSIsImNhbGxiYWNrIiwiY29uc29sZSIsIndhcm4iLCJpZCIsInRpdGxlIiwib3B0aW9ucyIsImRlZmF1bHRPcHRpb25WYWx1ZSIsImNvbnRhaW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0lBSWFBLGUsV0FBQUEsZTtBQUVULDZCQUFjO0FBQUE7QUFBRTs7QUFFaEI7Ozs7Ozs7Ozs7O3dDQU9xQkMsUSxFQUFXO0FBQzVCQyxjQUFRQyxJQUFSLENBQWMsa0VBQWQ7QUFDSDs7QUFFRDs7Ozs7Ozs7OzZCQU1VQyxFLEVBQUs7QUFDWEYsY0FBUUMsSUFBUixDQUFjLHVEQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7MkJBT1FFLEssRUFBT0MsTyxFQUFTQyxrQixFQUFxQjtBQUN6Q0wsY0FBUUMsSUFBUixDQUFjLHFEQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztvQ0FNaUJFLEssRUFBUTtBQUNyQkgsY0FBUUMsSUFBUixDQUFjLHlEQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7O3VDQUtvQkUsSyxFQUFRO0FBQ3hCSCxjQUFRQyxJQUFSLENBQWMsNERBQWQ7QUFDSDs7QUFFRDs7Ozs7Ozs7cUNBS2tCRSxLLEVBQVE7QUFDdEJILGNBQVFDLElBQVIsQ0FBYywrREFBZDtBQUNIOztBQUVEOzs7Ozs7b0NBR2dCO0FBQ1pELGNBQVFDLElBQVIsQ0FBYyw0REFBZDtBQUNIOztBQUVEOzs7Ozs7O2lDQUljSyxTLEVBQVk7QUFDdEJOLGNBQVFDLElBQVIsQ0FBYywyREFBZDtBQUNIIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgZnVuY3Rpb25zIHRoYXQgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGN1c3RvbSBmaWx0ZXJcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIEZpbHRlckludGVyZmFjZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbiBieSBmeWx0ZXIgbGlicmFyeSBjb2RlLlxuICAgICAqIFlvdSBjYW4gdGhlbiBzdG9yZSB0aGlzIGNhbGxiYWNrIHJlZmVyZW5jZSBhbmQgaW52b2tlIGl0IHdpdGggdGhlIHZhbHVlIG9mIHRoZSBvcHRpb25cbiAgICAgKiB0aGF0IHdhcyBzZWxkY3RlZCB3aGVuIHRoaXMgaGFwcGVucyBpbiB5b3UgcmltcGxlbWVudGF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgc2luZ2xlICd2YWx1ZScgYXJndW1lbnRcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZENhbGxiYWNrKCBjYWxsYmFjayApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCAnc2V0U2VsZWN0ZWRDYWxsYmFjayBzaG91bGQgYmUgb3ZlcnJpZGRlbiBieSBhIGltcGxlbWVudGluZyBjbGFzcycgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZb3VyIGN1c3RvbSBpbXBsbWVudGF0aW9uIHNob3VsZCBwcm92aWRlIGEgd2F5IHRvIHNldCB0aGUgdmFsdWUgb2YgYSBmaWx0ZXIgcHJvZ3JhbWF0aWNhbGx5IGdpdmVuXG4gICAgICogYW4gSUQgb2YgYW4gb3B0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGlkIG9mIHRoZSBvcHRpb24gdG8gc2V0XG4gICAgICovXG4gICAgc2V0VmFsdWUoIGlkICkge1xuICAgICAgICBjb25zb2xlLndhcm4oICdzZXRWYWx1ZSBzaG91bGQgYmUgb3ZlcnJpZGRlbiBieSBhIGltcGxlbWVudGluZyBjbGFzcycgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFpbiByZW5kZXIgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBhZGQgdGhlIGZpbHRlciB0byB0aGUgRE9NXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHRpdGxlIHRoZSB0aXRsZSBvZiB0aGUgZmlsdGVyXG4gICAgICogQHBhcmFtICB7QXJyYXkuPE9wdGlvbj59IG9wdGlvbnMgdGhlIHNldCBvZiBvcHRpb25zIHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZGVmYXVsdE9wdGlvblZhbHVlIHRoZSBJRCBvZiB0aGUgb3B0aW9uIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkXG4gICAgICovXG4gICAgcmVuZGVyKCB0aXRsZSwgb3B0aW9ucywgZGVmYXVsdE9wdGlvblZhbHVlICkge1xuICAgICAgICBjb25zb2xlLndhcm4oICdyZW5kZXIgc2hvdWxkIGJlIG92ZXJyaWRkZW4gYnkgYSBpbXBsZW1lbnRpbmcgY2xhc3MnICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWW91ciBjdXN0b20gaW1wbGVtZW50YXRpb24gc2hvdWxkIHByb3ZpZGUgYSBsb2FkaW5nIHN0YXRlIGZvciB0aGUgZmlsdGVyIHRoaXMgd2lsbCBiZSBpbnZva2VkIHdoZW5cbiAgICAgKiB0aGUgZmlsdGVyIHN0YXJ0cyB0byBmZXRjaCBkYXRhXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgdGhlIHRpdGxlIG9mIHRoZSBmaWx0ZXJcbiAgICAgKi9cbiAgICBzZXRMb2FkaW5nU3RhdGUoIHRpdGxlICkge1xuICAgICAgICBjb25zb2xlLndhcm4oICdzZXRMb2FkaW5nIHNob3VsZCBiZSBvdmVycmlkZGVuIGJ5IGEgaW1wbGVtZW50aW5nIGNsYXNzJyApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbG9hZGluZyBzdGF0ZSBmcm9tIHRnZSBmaWx0ZXIgY2FsbGVkIGJ5IGxpYnJhcnkgY29kZSB3aGVuIHRoZSBkYXRhIGhhcyBiZWVuIGZldGNoZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZSB0aGUgdGl0bGUgb2YgdGhlIGZpbHRlclxuICAgICAqL1xuICAgIHJlbW92ZUxvYWRpbmdTdGF0ZSggdGl0bGUgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybiggJ3JlbW92ZUxvYWRpbmcgc2hvdWxkIGJlIG92ZXJyaWRkZW4gYnkgYSBpbXBsZW1lbnRpbmcgY2xhc3MnICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSB0aGUgZmlsdGVyIHNvIHRoYXQgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggaXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZSB0aGUgdGl0bGUgb2YgdGhlIGZpbHRlclxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoIHRpdGxlICkge1xuICAgICAgICBjb25zb2xlLndhcm4oICdzZXREaXNhYmxlZFN0YXRlIHNob3VsZCBiZSBvdmVycmlkZGVuIGJ5IGEgaW1wbGVtZW50aW5nIGNsYXNzJyApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZyB3aXRoIHRoZSBmaWx0ZXIgISBkaXNwbGF5IGFuIGVycm9yIHN0YXRlIHRvIHRoZSB1c2VyXG4gICAgICovXG4gICAgc2V0RXJyb3JTdGF0ZSgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCAnc2V0RXJyb3JTdGF0ZSBzaG91bGQgYmUgb3ZlcnJpZGRlbiBieSBhIGltcGxlbWVudGluZyBjbGFzcycgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgeW91IHRvIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IGFuZCB3aGVuIHJlbmRlcmluZyB5b3VyIGN1c3RvbSBtYXJrdXAgc2hvdWxkIGdvIGludG8gdGhpcyBjb250YWluZXJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciB3aGVyZSB0aGUgZmlsdGVyIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqL1xuICAgIHNldENvbnRhaW5lciggY29udGFpbmVyICkge1xuICAgICAgICBjb25zb2xlLndhcm4oICdzZXRDb250YWluZXIgc2hvdWxkIGJlIG92ZXJyaWRkZW4gYnkgYSBpbXBsZW1lbnRpbmcgY2xhc3MnICk7XG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvanMvZmlsdGVyL0ZpbHRlckludGVyZmFjZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FILTER_STATE = exports.FilterInterface = exports.Filter = exports.FilterSet = undefined;\n\nvar _FilterSet = __webpack_require__(4);\n\nvar _Filter = __webpack_require__(1);\n\nvar _FilterInterface = __webpack_require__(2);\n\nvar _Enum = __webpack_require__(0);\n\nexports.FilterSet = _FilterSet.FilterSet;\nexports.Filter = _Filter.Filter;\nexports.FilterInterface = _FilterInterface.FilterInterface;\nexports.FILTER_STATE = _Enum.FILTER_STATE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvSW5kZXguanM/Y2RlMiJdLCJuYW1lcyI6WyJGaWx0ZXJTZXQiLCJGaWx0ZXIiLCJGaWx0ZXJJbnRlcmZhY2UiLCJGSUxURVJfU1RBVEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7UUFHSUEsUyxHQUFBQSxvQjtRQUNBQyxNLEdBQUFBLGM7UUFDQUMsZSxHQUFBQSxnQztRQUNBQyxZLEdBQUFBLGtCIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJTZXQgfSBmcm9tICcuL2ZpbHRlci1zZXQvRmlsdGVyU2V0LmpzJztcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4vZmlsdGVyL0ZpbHRlci5qcyc7XG5pbXBvcnQgeyBGaWx0ZXJJbnRlcmZhY2UgfSBmcm9tICcuL2ZpbHRlci9GaWx0ZXJJbnRlcmZhY2UuanMnO1xuaW1wb3J0IHsgRklMVEVSX1NUQVRFIH0gZnJvbSAnLi9lbnVtL0VudW0uanMnO1xuXG5leHBvcnQge1xuICAgIEZpbHRlclNldCxcbiAgICBGaWx0ZXIsXG4gICAgRmlsdGVySW50ZXJmYWNlLFxuICAgIEZJTFRFUl9TVEFURVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9qcy9JbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FilterSet = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Filter = __webpack_require__(1);\n\nvar _Request = __webpack_require__(7);\n\nvar _Enum = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The configuration needed to create a filterset\n * @typedef {Object} FilterSetConfig\n * @property {Array.<FilterConfig>} filters the set of filters to create\n * @property {Function} onUpdate function that is passed a single parameter Array.<C~CurrentFilterValue> when the filter reaches a new state\n * @property {Function} dataFetchImplementation the function that is used to fetch data, must return a promise in you rimplementation\n */\n\n/**\n * Filter Set clas, this is the main class exported from the library\n */\nvar FilterSet = exports.FilterSet = function () {\n    _createClass(FilterSet, [{\n        key: '_getFilterByName',\n\n\n        /**\n         * Fetch a filter by providing its name\n         *\n         * @param  {String} name    name of the filter\n         * @param  {Array.<Filter>} filters the set of filters\n         * @return {Filter|null} the filter found or null\n         */\n        value: function _getFilterByName(name, filters) {\n            for (var g = 0; g < filters.length; g++) {\n                var filter = filters[g];\n                if (filter.getName() === name) {\n                    return filter;\n                }\n            }\n        }\n\n        /**\n         * Filter dependencies are represented as a tree structure, every filter class extends TreeNode which provides the node behaviour\n         * This function builds that tree.\n         *\n         * @param  {Array.<Filter>} filters the set of filters\n         */\n\n    }, {\n        key: '_buildTree',\n        value: function _buildTree(filters) {\n            var _this = this;\n\n            filters.forEach(function (filter) {\n                var deps = filter.getDependencies();\n                if (deps.length === 0) {\n                    return;\n                }\n\n                deps.forEach(function (depName) {\n                    var depFilter = _this._getFilterByName(depName, filters);\n                    depFilter.addChild(filter);\n                });\n            });\n        }\n\n        /**\n         * We can immediatley determine which filters will be updated when a filter is changed by following its dependency tree\n         * So here we do this and set these filters to loading state while we do any work needed to update them.\n         *\n         * This is done recursivley on children of a given filter\n         *\n         * @param {Filter} filter the filter whose children to set loading\n         */\n\n    }, {\n        key: '_setAffectedFiltersLoading',\n        value: function _setAffectedFiltersLoading(filter) {\n\n            if (!filter.hasChildren()) {\n                return;\n            }\n\n            for (var x = 0; x < filter.getChildren().length; x++) {\n                var child = filter.getChildren()[x];\n                child.setState(_Enum.FILTER_STATE.LOADING);\n                this._setAffectedFiltersLoading(child);\n            }\n        }\n\n        /**\n         * Set all filters in the tree to a particular state\n         *\n         * @param {FilterState} state the state to set\n         */\n\n    }, {\n        key: '_setAllFiltersToState',\n        value: function _setAllFiltersToState(state) {\n\n            this.filters.forEach(function (filter) {\n                filter.setState(state);\n            });\n        }\n    }, {\n        key: '_getAllChildren',\n\n\n        /**\n         * Fetch all the children for a given set of filters\n         *\n         * @param  {Array.<Filter>} filters the filters\n         * @return {Array.<Filter>} the resulting children\n         */\n        value: function _getAllChildren(filters) {\n            return filters.reduce(function (array, filter) {\n                return array.concat(filter.getChildren());\n            }, []);\n        }\n\n        /**\n         * This is the main update function that is called when a filter is updated, Ite evaluates each\n         * level of the dependency tree in turn and returns a promise to resolve the next level the promise is\n         * resolved when there are no more children to update\n         *\n         * @param  {Array.<Filter>} filters the filters which have children that need to be resolved\n         * @return {Promise} promise that resolves when all updates are complete\n         */\n\n    }, {\n        key: '_updateFilterTree',\n        value: function _updateFilterTree(filters) {\n            var _this2 = this;\n\n            var allChildren = this._getAllChildren(filters);\n\n            if (allChildren.length === 0) {\n                return Promise.resolve();\n            }\n\n            var treeLevelPromises = allChildren.map(function (filterChild) {\n                return filterChild.dependencyDidUpdate(filterChild.getParent());\n            });\n\n            return Promise.all(treeLevelPromises).then(function () {\n                return _this2._updateFilterTree(allChildren);\n            }).catch(function (error) {\n                _this2._catchGenericError(error);\n            });\n        }\n\n        /**\n         * Something went wrong in the filters, show the error in the console and set the filter states to error. The update callback\n         * will not have been called if an error was thrown so make sure this is invoked also\n         *\n         * @param  {Error} error the error thrown\n         */\n\n    }, {\n        key: '_catchGenericError',\n        value: function _catchGenericError(error) {\n            console.warn(error);\n            this._setAllFiltersToState(_Enum.FILTER_STATE.ERROR);\n            this.config.onUpdate(this._getFilterStates());\n        }\n\n        /**\n         * Function that begins the filter updating process\n         *\n         * @param  {Filter} filter The filter that was updated\n         * @return {Promise} promise that resolves when the update is complete, state has been updated and user callback invoked\n         */\n\n    }, {\n        key: '_onFilterUpdated',\n        value: function _onFilterUpdated(filter) {\n            var _this3 = this;\n\n            this._setAffectedFiltersLoading(filter);\n            return this._updateFilterTree([filter]).then(function () {\n                // if the state is initialising\n                if (_this3.getState() !== _Enum.FILTER_SET_STATE.INITIALISING && _this3.getState() !== _Enum.FILTER_SET_STATE.RESETTING) {\n                    _this3.config.onUpdate(_this3._getFilterStates());\n                }\n            });\n        }\n\n        /**\n         * takes in the configs and creates Filter class instances from these\n         *\n         * @param  {Array.<FilterConfig>} filterConfigs the configurations\n         * @return {Array.<Filter>} the constructed instances\n         */\n\n    }, {\n        key: '_buildFilterInstances',\n        value: function _buildFilterInstances(filterConfigs) {\n            var _this4 = this;\n\n            return filterConfigs.map(function (config) {\n                return new _Filter.Filter(_extends({}, config, {\n                    wrapper: _this4.container,\n                    onOptionSelected: _this4._onFilterUpdated.bind(_this4),\n                    dataFetchImplementation: _this4.config.dataFetchImplementation\n                }));\n            });\n        }\n\n        /**\n         * Function that is called only once when the filters are initialising. It will tell all the root filters\n         * to fetch their data and render. The normal dependency behaviour will then handle the rest of the updates\n         */\n\n    }, {\n        key: '_initialiseFilters',\n        value: function _initialiseFilters() {\n            var _this5 = this;\n\n            var rootResolution = this.filters.map(function (filter) {\n                if (filter.isRoot()) {\n                    return filter.init();\n                }\n            });\n\n            Promise.all(rootResolution).then(function () {\n                _this5.setState(_Enum.FILTER_SET_STATE.IDLE);\n                _this5.config.onUpdate(_this5._getFilterStates());\n            });\n        }\n\n        /**\n         * Set the state of the filter set\n         *\n         * @param {FilterSetState} state state to set\n         */\n\n    }, {\n        key: 'setState',\n        value: function setState(state) {\n            this.state = state;\n        }\n\n        /**\n         * Get the current state of the filter\n         *\n         * @return {FilterSetState} th current state\n         */\n\n    }, {\n        key: 'getState',\n        value: function getState() {\n            return this.state;\n        }\n\n        /**\n         * Get the state of each filter\n         *\n         * @return {Array.<CurrentFilterValue>} the curretn states\n         */\n\n    }, {\n        key: '_getFilterStates',\n        value: function _getFilterStates() {\n            return this.filters.map(function (filter) {\n                return filter.getCurrentOption();\n            });\n        }\n\n        /**\n         * Begin the process of resetting the filters to their original value\n         *\n         * @return {Promise} promise that resolves when the filter has been reset\n         */\n\n    }, {\n        key: 'reset',\n        value: function reset() {\n            var _this6 = this;\n\n            this.setState(_Enum.FILTER_SET_STATE.RESETTING);\n            var resetPromises = this.filters.map(function (filter) {\n                if (filter.isRoot()) {\n                    return filter.reset();\n                }\n            });\n\n            return Promise.all(resetPromises).then(function () {\n                _this6.setState(_Enum.FILTER_SET_STATE.IDLE);\n                _this6.config.onUpdate(_this6._getFilterStates());\n            }).catch(function (error) {\n                _this6._catchGenericError(error);\n            });\n        }\n\n        /**\n         * Renders neccacary elements into the container\n         */\n\n    }, {\n        key: '_render',\n        value: function _render() {\n            var _this7 = this;\n\n            var button = document.createElement('button');\n            button.innerText = 'Reset';\n            button.onclick = function () {\n                _this7.reset();\n            };\n            button.classList.add('reset');\n            this.container.appendChild(button);\n        }\n\n        /**\n         * Construct the filter set\n         *\n         * @param  {HTMLElement} container container where filters are to be rendered\n         * @param  {FilterSetConfig} config the configuration\n         */\n\n    }], [{\n        key: 'DEFAULT_CONFIG',\n\n\n        /**\n         * Get the default configuration for the filterSet\n         *\n         * @returns {FilterSetConfig} the default config\n         */\n        value: function DEFAULT_CONFIG() {\n            return {\n                filters: [],\n                onUpdate: function onUpdate() {},\n                dataFetchImplementation: function dataFetchImplementation(url) {\n                    return (0, _Request.promiseRequest)(url, 'GET');\n                }\n            };\n        }\n    }]);\n\n    function FilterSet(container, config) {\n        _classCallCheck(this, FilterSet);\n\n        this.setState(_Enum.FILTER_SET_STATE.INITIALISING);\n        this.container = container;\n        this.config = _extends({}, FilterSet.DEFAULT_CONFIG(), config);\n        this.filterTree = null;\n        this.filters = this._buildFilterInstances(config.filters);\n        this._buildTree(this.filters);\n        this._initialiseFilters();\n        this._render();\n    }\n\n    /**\n     * Get the filter instances\n     *\n     * @return {Array.<Filter>} the filters\n     */\n\n\n    _createClass(FilterSet, [{\n        key: 'getInstances',\n        value: function getInstances() {\n            return this.filters;\n        }\n    }]);\n\n    return FilterSet;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class the describes a simple node in a treew data structure. Each filter is modeled as a element in a tree and this\n * is how the dependencies are modeled and evaluated, dependencies are represented as a parent child relationship.\n * Here we provide helper methods for evalutaing these relationships.\n */\nvar TreeNode = exports.TreeNode = function () {\n\n    /**\n     * initialise the tree node with no parent and no children\n     */\n    function TreeNode() {\n        _classCallCheck(this, TreeNode);\n\n        this.parent = null;\n        this.children = [];\n    }\n\n    /**\n     * Is a given node a child of this node?\n     *\n     * @param  {TreeNode}  node the node to check\n     * @return {Boolean} if the given node is a child of a parent\n     */\n\n\n    _createClass(TreeNode, [{\n        key: 'hasChild',\n        value: function hasChild(node) {\n\n            return this.children.indexOf(node) > -1;\n        }\n\n        /**\n         * Check wether the given node is the parent of this node\n         *\n         * @param  {TreeNode}  node node to check\n         * @return {Boolean} wether the given node is a preant of this node\n         */\n\n    }, {\n        key: 'parentIs',\n        value: function parentIs(node) {\n            return this.getParent() === node;\n        }\n\n        /**\n         * Add a TreeNode as a child of this node and set it as parent value\n         *\n         * @param {TreeNode} node the node to add as a child\n         */\n\n    }, {\n        key: 'addChild',\n        value: function addChild(node) {\n\n            if (this.hasChild(node)) {\n                throw new Error('Attempted to add a child that already exists');\n                return;\n            }\n\n            if (this.parentIs(node)) {\n                throw new Error('Attempted to create a cyclic dependency, adding a child that is already the parent');\n                return;\n            }\n\n            this.children.push(node);\n            node.setParent(this);\n        }\n\n        /**\n         * Wether the node has any children at the moment\n         *\n         * @return {Boolean} wether the node has any children\n         */\n\n    }, {\n        key: 'hasChildren',\n        value: function hasChildren() {\n            return this.children.length > 0;\n        }\n\n        /**\n         * Add a given node as a parent of this node\n         *\n         * @param {TreeNode} node the parent to set\n         */\n\n    }, {\n        key: 'setParent',\n        value: function setParent(node) {\n\n            if (this.hasChild(node)) {\n                throw new Error('Attempted to create a cyclic dependency, adding a parent that is already a child');\n                return;\n            }\n\n            if (this.parentIs(node)) {\n                throw new Error('Attempted to set a parent that is already the parent');\n                return;\n            }\n\n            this.parent = node;\n        }\n\n        /**\n         * A root node is a node with no parents, i.e. this node is dependant on no others\n         *\n         * @return {Boolean} Wether the node is a child\n         */\n\n    }, {\n        key: 'isRoot',\n        value: function isRoot() {\n            return this.parent === null;\n        }\n\n        /**\n         * Get all the children of this node\n         *\n         * @return {Array.<TreeNode>} the children\n         */\n\n    }, {\n        key: 'getChildren',\n        value: function getChildren() {\n            return this.children;\n        }\n\n        /**\n         * Get the current parent if it exists\n         *\n         * @return {TreeNode} the parent or null\n         */\n\n    }, {\n        key: 'getParent',\n        value: function getParent() {\n            return this.parent;\n        }\n    }]);\n\n    return TreeNode;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvdHJlZS9UcmVlTm9kZS5qcz9lOTU2Il0sIm5hbWVzIjpbIlRyZWVOb2RlIiwicGFyZW50IiwiY2hpbGRyZW4iLCJub2RlIiwiaW5kZXhPZiIsImdldFBhcmVudCIsImhhc0NoaWxkIiwiRXJyb3IiLCJwYXJlbnRJcyIsInB1c2giLCJzZXRQYXJlbnQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7SUFLYUEsUSxXQUFBQSxROztBQUVUOzs7QUFHQSx3QkFBYztBQUFBOztBQUNWLGFBQUtDLE1BQUwsR0FBYyxJQUFkO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNIOztBQUVEOzs7Ozs7Ozs7O2lDQU1VQyxJLEVBQU87O0FBRWIsbUJBQU8sS0FBS0QsUUFBTCxDQUFjRSxPQUFkLENBQXVCRCxJQUF2QixJQUFnQyxDQUFDLENBQXhDO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztpQ0FNVUEsSSxFQUFPO0FBQ2IsbUJBQU8sS0FBS0UsU0FBTCxPQUFxQkYsSUFBNUI7QUFDSDs7QUFFRDs7Ozs7Ozs7aUNBS1dBLEksRUFBTzs7QUFFZCxnQkFBSyxLQUFLRyxRQUFMLENBQWVILElBQWYsQ0FBTCxFQUE2QjtBQUN6QixzQkFBTSxJQUFJSSxLQUFKLENBQVcsOENBQVgsQ0FBTjtBQUNBO0FBQ0g7O0FBRUQsZ0JBQUssS0FBS0MsUUFBTCxDQUFlTCxJQUFmLENBQUwsRUFBNkI7QUFDekIsc0JBQU0sSUFBSUksS0FBSixDQUFXLG9GQUFYLENBQU47QUFDQTtBQUNIOztBQUVELGlCQUFLTCxRQUFMLENBQWNPLElBQWQsQ0FBb0JOLElBQXBCO0FBQ0FBLGlCQUFLTyxTQUFMLENBQWdCLElBQWhCO0FBQ0g7O0FBRUQ7Ozs7Ozs7O3NDQUtjO0FBQ1YsbUJBQU8sS0FBS1IsUUFBTCxDQUFjUyxNQUFkLEdBQXVCLENBQTlCO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2tDQUtZUixJLEVBQU87O0FBRWYsZ0JBQUssS0FBS0csUUFBTCxDQUFlSCxJQUFmLENBQUwsRUFBNkI7QUFDekIsc0JBQU0sSUFBSUksS0FBSixDQUFXLGtGQUFYLENBQU47QUFDQTtBQUNIOztBQUVELGdCQUFLLEtBQUtDLFFBQUwsQ0FBZUwsSUFBZixDQUFMLEVBQTZCO0FBQ3pCLHNCQUFNLElBQUlJLEtBQUosQ0FBVyxzREFBWCxDQUFOO0FBQ0E7QUFDSDs7QUFFRCxpQkFBS04sTUFBTCxHQUFjRSxJQUFkO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2lDQUtVO0FBQ04sbUJBQU8sS0FBS0YsTUFBTCxLQUFnQixJQUF2QjtBQUNIOztBQUVEOzs7Ozs7OztzQ0FLZTtBQUNYLG1CQUFPLEtBQUtDLFFBQVo7QUFDSDs7QUFFRDs7Ozs7Ozs7b0NBS1k7QUFDUixtQkFBTyxLQUFLRCxNQUFaO0FBQ0giLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xhc3MgdGhlIGRlc2NyaWJlcyBhIHNpbXBsZSBub2RlIGluIGEgdHJlZXcgZGF0YSBzdHJ1Y3R1cmUuIEVhY2ggZmlsdGVyIGlzIG1vZGVsZWQgYXMgYSBlbGVtZW50IGluIGEgdHJlZSBhbmQgdGhpc1xuICogaXMgaG93IHRoZSBkZXBlbmRlbmNpZXMgYXJlIG1vZGVsZWQgYW5kIGV2YWx1YXRlZCwgZGVwZW5kZW5jaWVzIGFyZSByZXByZXNlbnRlZCBhcyBhIHBhcmVudCBjaGlsZCByZWxhdGlvbnNoaXAuXG4gKiBIZXJlIHdlIHByb3ZpZGUgaGVscGVyIG1ldGhvZHMgZm9yIGV2YWx1dGFpbmcgdGhlc2UgcmVsYXRpb25zaGlwcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRyZWVOb2RlIHtcblxuICAgIC8qKlxuICAgICAqIGluaXRpYWxpc2UgdGhlIHRyZWUgbm9kZSB3aXRoIG5vIHBhcmVudCBhbmQgbm8gY2hpbGRyZW5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgYSBnaXZlbiBub2RlIGEgY2hpbGQgb2YgdGhpcyBub2RlP1xuICAgICAqXG4gICAgICogQHBhcmFtICB7VHJlZU5vZGV9ICBub2RlIHRoZSBub2RlIHRvIGNoZWNrXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gaWYgdGhlIGdpdmVuIG5vZGUgaXMgYSBjaGlsZCBvZiBhIHBhcmVudFxuICAgICAqL1xuICAgIGhhc0NoaWxkKCBub2RlICkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmluZGV4T2YoIG5vZGUgKSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdldGhlciB0aGUgZ2l2ZW4gbm9kZSBpcyB0aGUgcGFyZW50IG9mIHRoaXMgbm9kZVxuICAgICAqXG4gICAgICogQHBhcmFtICB7VHJlZU5vZGV9ICBub2RlIG5vZGUgdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB3ZXRoZXIgdGhlIGdpdmVuIG5vZGUgaXMgYSBwcmVhbnQgb2YgdGhpcyBub2RlXG4gICAgICovXG4gICAgcGFyZW50SXMoIG5vZGUgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudCgpID09PSBub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIFRyZWVOb2RlIGFzIGEgY2hpbGQgb2YgdGhpcyBub2RlIGFuZCBzZXQgaXQgYXMgcGFyZW50IHZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1RyZWVOb2RlfSBub2RlIHRoZSBub2RlIHRvIGFkZCBhcyBhIGNoaWxkXG4gICAgICovXG4gICAgYWRkQ2hpbGQgKCBub2RlICkge1xuXG4gICAgICAgIGlmICggdGhpcy5oYXNDaGlsZCggbm9kZSApICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnQXR0ZW1wdGVkIHRvIGFkZCBhIGNoaWxkIHRoYXQgYWxyZWFkeSBleGlzdHMnICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoaXMucGFyZW50SXMoIG5vZGUgKSApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ0F0dGVtcHRlZCB0byBjcmVhdGUgYSBjeWNsaWMgZGVwZW5kZW5jeSwgYWRkaW5nIGEgY2hpbGQgdGhhdCBpcyBhbHJlYWR5IHRoZSBwYXJlbnQnICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goIG5vZGUgKTtcbiAgICAgICAgbm9kZS5zZXRQYXJlbnQoIHRoaXMgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZXRoZXIgdGhlIG5vZGUgaGFzIGFueSBjaGlsZHJlbiBhdCB0aGUgbW9tZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB3ZXRoZXIgdGhlIG5vZGUgaGFzIGFueSBjaGlsZHJlblxuICAgICAqL1xuICAgIGhhc0NoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGdpdmVuIG5vZGUgYXMgYSBwYXJlbnQgb2YgdGhpcyBub2RlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1RyZWVOb2RlfSBub2RlIHRoZSBwYXJlbnQgdG8gc2V0XG4gICAgICovXG4gICAgc2V0UGFyZW50ICggbm9kZSApIHtcblxuICAgICAgICBpZiAoIHRoaXMuaGFzQ2hpbGQoIG5vZGUgKSApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ0F0dGVtcHRlZCB0byBjcmVhdGUgYSBjeWNsaWMgZGVwZW5kZW5jeSwgYWRkaW5nIGEgcGFyZW50IHRoYXQgaXMgYWxyZWFkeSBhIGNoaWxkJyApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLnBhcmVudElzKCBub2RlICkgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdBdHRlbXB0ZWQgdG8gc2V0IGEgcGFyZW50IHRoYXQgaXMgYWxyZWFkeSB0aGUgcGFyZW50JyApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcm9vdCBub2RlIGlzIGEgbm9kZSB3aXRoIG5vIHBhcmVudHMsIGkuZS4gdGhpcyBub2RlIGlzIGRlcGVuZGFudCBvbiBubyBvdGhlcnNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFdldGhlciB0aGUgbm9kZSBpcyBhIGNoaWxkXG4gICAgICovXG4gICAgaXNSb290ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZVxuICAgICAqXG4gICAgICogQHJldHVybiB7QXJyYXkuPFRyZWVOb2RlPn0gdGhlIGNoaWxkcmVuXG4gICAgICovXG4gICAgZ2V0Q2hpbGRyZW4gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgcGFyZW50IGlmIGl0IGV4aXN0c1xuICAgICAqXG4gICAgICogQHJldHVybiB7VHJlZU5vZGV9IHRoZSBwYXJlbnQgb3IgbnVsbFxuICAgICAqL1xuICAgIGdldFBhcmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9qcy90cmVlL1RyZWVOb2RlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.NativeSelectFilter = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _FilterInterface2 = __webpack_require__(2);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * An example implementation of a custom filter dropdown\n * @implements FilterInterface\n */\nvar NativeSelectFilter = exports.NativeSelectFilter = function (_FilterInterface) {\n    _inherits(NativeSelectFilter, _FilterInterface);\n\n    function NativeSelectFilter() {\n        _classCallCheck(this, NativeSelectFilter);\n\n        return _possibleConstructorReturn(this, (NativeSelectFilter.__proto__ || Object.getPrototypeOf(NativeSelectFilter)).call(this));\n    }\n\n    /**\n     * Save a reference to the callback passed by library code\n     *\n     * @param {Function} callback the callback function that accepts a single 'value' argument\n     * @override\n     */\n\n\n    _createClass(NativeSelectFilter, [{\n        key: 'setSelectedCallback',\n        value: function setSelectedCallback(callback) {\n\n            this.callback = callback;\n        }\n\n        /**\n         * Set a specific value on the select dropdown\n         *\n         * @param {String} id the id of the option to set\n         * @override\n         */\n\n    }, {\n        key: 'setValue',\n        value: function setValue(id) {\n            var select = this.container.querySelector('select');\n\n            if (!select) {\n                return;\n            }\n\n            select.value = id;\n        }\n\n        /**\n         * Callback for when the select dropdown changes its value\n         */\n\n    }, {\n        key: 'onSelect',\n        value: function onSelect() {\n\n            var select = this.container.querySelector('select');\n\n            if (select && select.getBoundingClientRect().width > this.container.getBoundingClientRect().width) {\n                this.container.classList.add('filter--overflow');\n            } else {\n                this.container.classList.remove('filter--overflow');\n            }\n\n            this.callback(select.value);\n        }\n\n        /**\n         * The main render function that will be called to add the filter to the DOM\n         *\n         * @param  {String} title the title of the filter\n         * @param  {Array.<Option>} options the set of options to render\n         * @param  {String} defaultOptionValue the ID of the option that is currently selected\n         * @override\n         */\n\n    }, {\n        key: 'render',\n        value: function render(title, options, defaultOptionValue) {\n\n            this.container.innerHTML = '';\n            var elements = this.createSelectElement(title, options, defaultOptionValue);\n            this.container.appendChild(elements.label);\n            this.container.appendChild(elements.select);\n            this.container.appendChild(elements.indicator);\n            elements.select.onchange = this.onSelect.bind(this);\n        }\n\n        /**\n         * Create a select element in memory\n         *\n         * @param  {String} name the title of the filter\n         * @param  {Array.<Option>} options the set of options to render\n         * @param  {String} defaultValue the ID of the option that is currently selected\n         * @return {Object} object containing a select element, label and a indicator element which is colored depending on state\n         */\n\n    }, {\n        key: 'createSelectElement',\n        value: function createSelectElement(name, options, defaultValue) {\n            var _this2 = this;\n\n            var select = document.createElement('select');\n            var label = document.createElement('label');\n            var indicator = document.createElement('div');\n\n            select.id = name;\n            label.for = name;\n            label.innerText = name;\n            select.classList.add('filter__select');\n            label.classList.add('filter__label');\n            indicator.classList.add('filter__indicator');\n\n            options.forEach(function (option) {\n                var optionEl = _this2.createOptionElement(option);\n                if (option.value === defaultValue) {\n                    optionEl.selected = 'true';\n                }\n                select.appendChild(optionEl);\n            });\n\n            return { label: label, select: select, indicator: indicator };\n        }\n\n        /**\n         * Create a select dropdown <option> element in memory\n         *\n         * @param  {Option} option the option to create\n         * @return {HTMLElement} the <option> element\n         */\n\n    }, {\n        key: 'createOptionElement',\n        value: function createOptionElement(option) {\n\n            var optionEl = document.createElement('option');\n            optionEl.value = option.value;\n            optionEl.innerText = option.name;\n            if (option.default) {\n                optionEl.selected = true;\n            }\n\n            return optionEl;\n        }\n\n        /**\n         * Set the select into a loading state while it fetches data\n         * @param {String} title title of the element\n         */\n\n    }, {\n        key: 'setLoadingState',\n        value: function setLoadingState(title) {\n            this.render(title, [{ name: 'Loading', value: '-1' }], '-1');\n            this.container.classList.remove('filter--disabled');\n            this.container.classList.add('filter--loading');\n        }\n\n        /**\n         * Get rid of the loading class\n         *\n         * @param {String} title title of the element\n         */\n\n    }, {\n        key: 'removeLoadingState',\n        value: function removeLoadingState(title) {\n            this.container.classList.remove('filter--loading');\n        }\n\n        /**\n         * make sure the user cannot interact with the filter\n         *\n         * @param {String} title title of the element\n         */\n\n    }, {\n        key: 'setDisabledState',\n        value: function setDisabledState(title) {\n            this.render(title, [{ name: 'Disabled', value: 'disabled' }], 'disabled');\n            this.container.classList.add('filter--disabled');\n            this.container.classList.remove('filter--loading');\n        }\n\n        /**\n         * Set the filter into a error state as something has gone wrong\n         */\n\n    }, {\n        key: 'setErrorState',\n        value: function setErrorState(title) {\n            this.render(title, [{ name: 'Error', value: '-1' }], '-1');\n        }\n\n        /**\n         * Set the container so it can be used to render the filter into later\n         *\n         * @param {HTMLElement} container the filter container\n         */\n\n    }, {\n        key: 'setContainer',\n        value: function setContainer(container) {\n            this.container = container;\n        }\n    }]);\n\n    return NativeSelectFilter;\n}(_FilterInterface2.FilterInterface);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.promiseRequest = undefined;\n\nvar _parameterError = __webpack_require__(8);\n\n/**\n * Very simple in-built data request functionality for filters. You can override this with your own data\n * fetching layer.\n *\n * @param {String} url The URL to call to fetch data\n * @param {String} method get\n * @return {Promise} promise that resolves with data or rejects with error\n */\nvar promiseRequest = exports.promiseRequest = function promiseRequest() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _parameterError.parameterError)('Url must be provided to make request');\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n\n\n    return new Promise(function (resolve, reject) {\n\n        var xhttp = new XMLHttpRequest();\n        xhttp.addEventListener('load', function (evt) {\n\n            console.log(xhttp.status);\n\n            if (xhttp.status < 400 && xhttp.status > 0) {\n                try {\n                    return resolve({\n                        data: JSON.parse(xhttp.responseText)\n                    });\n                } catch (e) {\n                    return reject(e);\n                }\n            }\n\n            return reject('Non 200+ response from API');\n        });\n\n        xhttp.addEventListener('error', reject);\n        xhttp.addEventListener('abort', reject);\n        xhttp.open(\"GET\", url, true);\n        xhttp.send();\n    });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvbmV0d29yay9SZXF1ZXN0LmpzPzM1YWIiXSwibmFtZXMiOlsicHJvbWlzZVJlcXVlc3QiLCJ1cmwiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiY29uc29sZSIsImxvZyIsInN0YXR1cyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJlIiwib3BlbiIsInNlbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQSwwQ0FBaUIsU0FBakJBLGNBQWlCLEdBQTJGO0FBQUEsUUFBakZDLEdBQWlGLHVFQUEzRSxvQ0FBZ0Isc0NBQWhCLENBQTJFO0FBQUEsUUFBakJDLE1BQWlCLHVFQUFSLEtBQVE7OztBQUVySCxXQUFPLElBQUlDLE9BQUosQ0FBYSxVQUFFQyxPQUFGLEVBQVdDLE1BQVgsRUFBdUI7O0FBRXZDLFlBQUlDLFFBQVEsSUFBSUMsY0FBSixFQUFaO0FBQ0FELGNBQU1FLGdCQUFOLENBQXdCLE1BQXhCLEVBQWdDLGVBQU87O0FBRW5DQyxvQkFBUUMsR0FBUixDQUFhSixNQUFNSyxNQUFuQjs7QUFFQSxnQkFBS0wsTUFBTUssTUFBTixHQUFlLEdBQWYsSUFBc0JMLE1BQU1LLE1BQU4sR0FBZSxDQUExQyxFQUE4QztBQUMxQyxvQkFBSTtBQUNBLDJCQUFPUCxRQUFTO0FBQ1pRLDhCQUFNQyxLQUFLQyxLQUFMLENBQVlSLE1BQU1TLFlBQWxCO0FBRE0scUJBQVQsQ0FBUDtBQUdILGlCQUpELENBSUUsT0FBUUMsQ0FBUixFQUFZO0FBQ1YsMkJBQU9YLE9BQVFXLENBQVIsQ0FBUDtBQUNIO0FBQ0o7O0FBRUQsbUJBQU9YLE9BQVEsNEJBQVIsQ0FBUDtBQUVILFNBaEJEOztBQWtCQUMsY0FBTUUsZ0JBQU4sQ0FBd0IsT0FBeEIsRUFBaUNILE1BQWpDO0FBQ0FDLGNBQU1FLGdCQUFOLENBQXdCLE9BQXhCLEVBQWlDSCxNQUFqQztBQUNBQyxjQUFNVyxJQUFOLENBQVcsS0FBWCxFQUFrQmhCLEdBQWxCLEVBQXVCLElBQXZCO0FBQ0FLLGNBQU1ZLElBQU47QUFFSCxLQTFCTSxDQUFQO0FBMkJILENBN0JNIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJhbWV0ZXJFcnJvciB9IGZyb20gJy4uL3V0aWwvcGFyYW1ldGVyRXJyb3IuanMnO1xuXG4vKipcbiAqIFZlcnkgc2ltcGxlIGluLWJ1aWx0IGRhdGEgcmVxdWVzdCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXJzLiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgd2l0aCB5b3VyIG93biBkYXRhXG4gKiBmZXRjaGluZyBsYXllci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gY2FsbCB0byBmZXRjaCBkYXRhXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIGdldFxuICogQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggZGF0YSBvciByZWplY3RzIHdpdGggZXJyb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHByb21pc2VSZXF1ZXN0ID0gZnVuY3Rpb24oIHVybCA9IHBhcmFtZXRlckVycm9yKCAnVXJsIG11c3QgYmUgcHJvdmlkZWQgdG8gbWFrZSByZXF1ZXN0JyApLCBtZXRob2QgPSAnR0VUJyApIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cbiAgICAgICAgdmFyIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhodHRwLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgZXZ0ID0+IHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coIHhodHRwLnN0YXR1cyApO1xuXG4gICAgICAgICAgICBpZiAoIHhodHRwLnN0YXR1cyA8IDQwMCAmJiB4aHR0cC5zdGF0dXMgPiAwICkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnBhcnNlKCB4aHR0cC5yZXNwb25zZVRleHQgKVxuICAgICAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCggZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCggJ05vbiAyMDArIHJlc3BvbnNlIGZyb20gQVBJJyApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICB4aHR0cC5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCByZWplY3QgKVxuICAgICAgICB4aHR0cC5hZGRFdmVudExpc3RlbmVyKCAnYWJvcnQnLCByZWplY3QgKVxuICAgICAgICB4aHR0cC5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHhodHRwLnNlbmQoKTtcblxuICAgIH0gKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9qcy9uZXR3b3JrL1JlcXVlc3QuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Throw an error when a parameter is wrongly missed out from the function call\n * @param  {String} message message to display in error\n * @throws {Error}\n */\nvar parameterError = exports.parameterError = function parameterError(message) {\n  throw new Error(\"Parameter Error \" + message);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvanMvdXRpbC9wYXJhbWV0ZXJFcnJvci5qcz83YzI3Il0sIm5hbWVzIjpbInBhcmFtZXRlckVycm9yIiwibWVzc2FnZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztBQUtPLElBQU1BLDBDQUFpQixTQUFqQkEsY0FBaUIsQ0FBVUMsT0FBVixFQUFvQjtBQUM5QyxRQUFNLElBQUlDLEtBQUosc0JBQStCRCxPQUEvQixDQUFOO0FBQ0gsQ0FGTSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaHJvdyBhbiBlcnJvciB3aGVuIGEgcGFyYW1ldGVyIGlzIHdyb25nbHkgbWlzc2VkIG91dCBmcm9tIHRoZSBmdW5jdGlvbiBjYWxsXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG1lc3NhZ2UgbWVzc2FnZSB0byBkaXNwbGF5IGluIGVycm9yXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcmFtZXRlckVycm9yID0gZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCBgUGFyYW1ldGVyIEVycm9yICR7IG1lc3NhZ2UgfWAgKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvanMvdXRpbC9wYXJhbWV0ZXJFcnJvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ })
/******/ ]);